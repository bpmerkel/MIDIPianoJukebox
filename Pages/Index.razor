@page "/"
@page "/{Playlist}"
@inject NavigationManager NavigationManager
@inject JukeboxService JukeboxService
@using MIDIPianoJukebox.Data

@if (!JukeboxService.Loaded)
{
    <div style="text-align: center; align-content: center; vertical-align: middle">
        <em>Loading...</em><br />
        <img src="/giphy.gif" alt="Loading..." />
    </div>
}
else
{
    <div style="padding: 10px;">
        <h3>@Playlist (@($"{JukeboxService.Queue.Count:#,##0}"))</h3>
        <MudButton StartIcon="@Icons.Material.Filled.Shuffle" Variant="@(Shuffle ? Variant.Filled : Variant.Outlined)" OnClick="@(m => Shuffle = !Shuffle)">Shuffle</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.SkipNext" OnClick="@(e => doPlayNext())" Disabled="@(!JukeboxService.Queue.Any())">Play Next</MudButton>
        @if (JukeboxService.State == PlayerState.Playing)
        {
            <MudButton StartIcon="@Icons.Material.Filled.PauseCircleFilled" OnClick="@(e => doPause())">Pause</MudButton>
        }
        else if (JukeboxService.State == PlayerState.Paused)
        {
            <MudButton StartIcon="@Icons.Material.Filled.PlayCircleOutline" OnClick="@(e => doPlay())">Resume</MudButton>
        }

        @if (JukeboxService.State != PlayerState.Stopped)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Replay" OnClick="@(e => doReplay(0))" Disabled="@(!JukeboxService.Queue.Any())">Replay</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.FastForward" OnClick="@(e => doSkip(10_000))" Disabled="@(!JukeboxService.Queue.Any())">Skip 10</MudButton>
        }

        @if (JukeboxService.State == PlayerState.Stopped)
        {
            <span>Stopped</span>
        }
        else if (JukeboxService.State == PlayerState.Playing)
        {
            <span>Playing</span>
        }
        else if (JukeboxService.State == PlayerState.Paused)
        {
            <span>Paused</span>
        }
    </div>
    @if (JukeboxService.Tune != null)
    {
        <div style="padding: 10px">
            <div class="justify-right">
                @JukeboxService.CurrentTime.ToString("m\\:ss")
            </div>
            <div>
                <MudProgressLinear Value="@JukeboxService.Progress" Size="Size.Small" />
            </div>
            <div>
                @JukeboxService.RemainingTime.ToString("m\\:ss")
            </div>
        </div>
        <TuneCard Tune="@JukeboxService.Tune" OnRatingChanged="@(r => doRatingChanged(JukeboxService.Tune, r, true))"></TuneCard>
    }
    <div style="padding: 10px; margin-bottom: 10px;">
        @{
            var pl = JukeboxService.Playlists
                .Where(pp => pp.Tunes.Count > 0)
                .OrderBy(pp => pp.Name)
                .ToList();
            var last = pl.Count - 1;
            var comma = ", ";
            foreach (var p in pl.Select((p, i) => new { p, delim = i < last ? comma : string.Empty }))
            {
                <a href="@($"/{p.p.Name}")" class="navItem">@p.p.Name&nbsp;(@($"{p.p.Tunes.Count:#,##0}"))</a>
                @p.delim
            }
        }
    </div>
}

@code {
    [Parameter] public string Playlist { get; set; }
    bool Shuffle = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += (s, e) => doNavTo();
        await JukeboxService.GetJukeboxAsync();
        JukeboxService.ProgressChanged = p => InvokeAsync(() => StateHasChanged());
        JukeboxService.ReadyToPlayNext += (s, a) => InvokeAsync(() => doPlayNext());
        doNavTo();
    }

    protected void doNavTo()
    {
        if (!JukeboxService.Loaded) return;

        if (string.IsNullOrWhiteSpace(Playlist))
        {
            Playlist = JukeboxService.Playlists.OrderBy(p => p.Tunes?.Count ?? 0).Select(p => p.Name).FirstOrDefault();
        }

        var p = JukeboxService.Playlists.FirstOrDefault(p => p.Name.Equals(Playlist, StringComparison.CurrentCultureIgnoreCase));
        if (p != null)
        {
            JukeboxService.DequeueAll();
            JukeboxService.EnqueueAll(p.Tunes.OrderBy(t => t.Filepath).ToList());
        }
        StateHasChanged();
    }

    protected void doRatingChanged(Tune t, float rating, bool next = false)
    {
        t.Rating = rating;
        JukeboxService.SaveTune(t);
        if (next && rating <= 3f) JukeboxService.PlayNext(Shuffle);
        StateHasChanged();
    }

    protected void doPlay()
    {
        JukeboxService.ResumePlayer();
        StateHasChanged();
    }

    protected void doPlayNext()
    {
        JukeboxService.PlayNext(Shuffle);
        StateHasChanged();
    }

    protected void doPause()
    {
        JukeboxService.PausePlayer();
        StateHasChanged();
    }

    protected void doSkip(int ticks)
    {
        JukeboxService.SkipPlayer(ticks);
        StateHasChanged();
    }

    protected void doReplay(int ticks)
    {
        JukeboxService.SkipPlayerTo(ticks);
        StateHasChanged();
    }
}
