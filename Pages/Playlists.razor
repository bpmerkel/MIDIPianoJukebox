@page "/playlists"
@page "/playlists/{playlist}"
@page "/search/{start}"
@page "/library/{library}"
@page "/tag/{tag}"
@inject NavigationManager NavigationManager
@inject JukeboxService JukeboxService
@inject IDialogService DialogService
@using LiteDB
@using MIDIPianoJukebox.Data

@if (!JukeboxService.Loaded)
{
    <div style="text-align: center; align-content: center; vertical-align: middle">
        <em>Loading...</em><br />
        <img src="/giphy.gif" alt="Loading..." />
    </div>
}
else
{
    <div>
        @{
            var playlists = JukeboxService.Playlists
                .OrderBy(playlist => playlist.Name)
                .Select((playlist, i) => new { playlist, i })
                .ToList();
            foreach (var p in playlists)
            {
                <a href="/playlists/@p.playlist.Name" class="navItem">@(p.playlist.Name)&nbsp;(@p.playlist.Tunes.Count.ToString("#,##0"))</a>
                @(p.i == JukeboxService.Playlists.Count - 1 ? string.Empty : ", ")
            }
        }
    </div>
    <div class="alphaList">
        @foreach (var c in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        {
            <a href="@($"/search/{c}")" class="alphaLink">&nbsp;@c</a>
        }
        <a href="/library/ALL" class="alphaLink">&nbsp;ALL</a>
        <a href="/library/orphan" class="navItem">&nbsp;ORPHANS</a>
    </div>
    <MudDataGrid Items="@Tunes" T="Tune"
                 Hideable="false" Hover="true" Dense="true" Striped="true" FixedFooter="false"
                 Groupable="true" GroupExpanded="true"
                 SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@quickFilter"
                 Virtualize="true" FixedHeader="true" Height="calc(100% - 80px)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tunes</MudText>
            <MudText Typo="Typo.body1">&nbsp;(@($"{Tunes?.Count:#,##0}"))</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="@playlist" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" Clearable="true" TextChanged="@doSearch"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
            <MudCheckBox T="bool" Label="Search Tags" Color="Color.Primary" CheckedChanged="@(async (isChecked) => await doSearchTags(isChecked))" />

            @if (playlist != null)
            {
                var exists = JukeboxService.Playlists.Any(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase));
                <MudButton Disabled="@exists" OnClick="@(m => createPlaylist())">Create Playlist</MudButton>
                <MudButton Disabled="@(!exists)" OnClick="@(m => clearPlaylist())">Remove Playlist</MudButton>
            }
            @if (Tunes != null)
            {
                <MudButton StartIcon="@Icons.Material.Filled.PlaylistAdd" OnClick="@(e => openDialog())" Disabled="@(!Tunes.Any())">Align</MudButton>
            }
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="tune => tune.Name" />
            <PropertyColumn Property="tune => tune.Duration" Format="mm\:ss" Filterable="false" Class="justify-right" CellClass="justify-right" />
            <TemplateColumn Title="Rating" SortBy="@(item => item.Rating)" Filterable="false" Class="justify-right" CellClass="justify-right">
                <CellTemplate>
                    <MudStack Row>
                        <MudRating Size="@Size.Small" SelectedValue="@(Convert.ToInt32(context.Item.Rating))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
             <PropertyColumn Property="tune => tune.Plays" Class="justify-right" CellClass="justify-right" />
             <PropertyColumn Property="tune => tune.Tracks" Class="justify-right" CellClass="justify-right" />
             <PropertyColumn Property="tune => tune.Messages" Class="justify-right" CellClass="justify-right" />
             <PropertyColumn Property="tune => tune.Complexity" Class="justify-right" CellClass="justify-right" />
        </Columns>
        <ChildRowContent>
            <TagList Tune="@context.Item" />
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Tune" PageSizeOptions="@(new[] { 30, 50, 100, 200 })" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    [Parameter] public string library { get; set; }
    [Parameter] public string playlist { get; set; }
    [Parameter] public string start { get; set; }
    [Parameter] public string tag { get; set; }
    List<Tune> Tunes;
    bool SearchTags = true;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (s, e) => doNavTo();
        await JukeboxService.GetJukeboxAsync();
        doNavTo();
        await base.OnInitializedAsync();
    }

    Task doSearchTags(bool value)
    {
        SearchTags = value;
        doSearch();
        return Task.CompletedTask;
    }

    // quick filter
    bool quickFilter(Tune tune)
    {
        if (playlist != null)
        {
            if (tune.Name?.Contains(playlist, StringComparison.OrdinalIgnoreCase) ?? false)
                return true;
            if (SearchTags && (tune.Tags?.Any(tag => playlist.Contains(tag, StringComparison.CurrentCultureIgnoreCase)) ?? false))
                return true;
        }

        return false;
    }

    protected void doNavTo()
    {
        if (!JukeboxService.Loaded) return;

        if (!string.IsNullOrWhiteSpace(library))
        {
            if (library.Equals("all", StringComparison.CurrentCultureIgnoreCase))
            {
                playlist = "All";
                Tunes = JukeboxService.Tunes;
            }
            else if (library.Equals("orphan", StringComparison.CurrentCultureIgnoreCase))
            {
                playlist = "Orphans";
                var comparer = new Tune();
                var pltunes = JukeboxService.Playlists.SelectMany(p => p.Tunes).Distinct(comparer);
                Tunes = JukeboxService.Tunes.Except(pltunes, comparer).Where(t => t.Durationms > 0).ToList();
            }
            else
            {
                playlist = library;
                Tunes = JukeboxService.Tunes
                    .Where(t => t.Library != null)
                    .Where(t => t.Library.Equals(library, StringComparison.CurrentCultureIgnoreCase))
                    .ToList();
            }
        }
        else if (!string.IsNullOrWhiteSpace(tag))
        {
            playlist = tag;
            Tunes = JukeboxService.Tunes
                .Where(t => t.Tags.Any(tag => tag.Equals(tag, StringComparison.CurrentCultureIgnoreCase))
                        || (t.Name?.StartsWith(tag, StringComparison.CurrentCultureIgnoreCase) ?? false))
                .ToList();
        }
        else if (!string.IsNullOrWhiteSpace(playlist))
        {
            var p = JukeboxService.Playlists.FirstOrDefault(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase));
            if (p != null)
            {
                Tunes = p.Tunes;
            }
        }
        else if (!string.IsNullOrWhiteSpace(start))
        {
            playlist = start;
            Tunes = JukeboxService.Tunes
                .Where(t => t.Name?.StartsWith(start, StringComparison.CurrentCultureIgnoreCase) ?? false)
                .ToList();
        }
        else
        {
            // default to ALL
            playlist = "All";
            Tunes = JukeboxService.Tunes;
        }

        StateHasChanged();
    }

    protected void doSearch()
    {
        if (string.IsNullOrWhiteSpace(playlist)) return;
        Tunes = JukeboxService.Tunes
            .Where(t => (SearchTags && t.Tags.Any(tag => tag.Contains(playlist, StringComparison.CurrentCultureIgnoreCase)))
                    || (t.Name?.StartsWith(playlist, StringComparison.CurrentCultureIgnoreCase) ?? false))
            .ToList();
        StateHasChanged();
    }

    protected void createPlaylist()
    {
        // if a new playlist is requested, add it
        if (!string.IsNullOrWhiteSpace(playlist) && !JukeboxService.Playlists.Any(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase)))
        {
            var p = new Data.Playlist { Name = toTitleCase(playlist), ID = ObjectId.NewObjectId(), Tunes = Tunes };
            JukeboxService.Playlists.Add(p);
            JukeboxService.SavePlaylist(p);
            StateHasChanged();
        }
    }

    protected void clearPlaylist()
    {
        JukeboxService.ClearPlaylist(playlist);
        playlist = null;
        StateHasChanged();
    }

    protected string toTitleCase(string input) => System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(input);

    protected void openDialog()
    {
        var parameters = new DialogParameters<AlignToPlaylist>();
        parameters.Add(x => x.Tunes, Tunes);

        DialogService.Show<AlignToPlaylist>("Align", parameters, new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                DisableBackdropClick = true,
                NoHeader = false,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true
            });
    }
}
