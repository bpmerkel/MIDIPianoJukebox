@page "/playlists"
@page "/playlists/{playlist}"
@page "/library/{library}"
@page "/tag/{tag}"
@using LiteDB
@using MIDIPianoJukebox.Data
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@
@inject NavigationManager NavigationManager
@inject JukeboxService JukeboxService

@if (!JukeboxService.Loaded)
{
    <div style="text-align: center; align-content: center; vertical-align: middle">
        <em>Loading...</em><br />
        <img src="/giphy.gif" alt="Loading..." />
    </div>
}
else
{
    <MatDialog @bind-IsOpen="@playlistDialogIsOpen" Style="width: 90vw; max-width: 90vw">
        <MatDialogTitle>Align to Playlists</MatDialogTitle>
        <MatDialogContent>
            @if (playlistDialogIsOpen)
            {
                if (!isSelected.Any())
                {
                    foreach (var p in JukeboxService.Playlists)
                    {
                        // are all the tunes shown in the table, also in this playlist?
                        if (Tunes.Any(t => p.Tunes.Any(tt => tt.ID == t.ID)))
                        {
                            isSelected.Add(p, true);
                        }
                    }
                }
                foreach (var p in JukeboxService.Playlists.OrderBy(pp => pp.Name))
                {
                    isSelected.TryGetValue(p, out bool selected);
                    <MatButton Raised="@selected" Outlined="@(!selected)" OnClick="@(m => toggleSelected(p))">@p.Name</MatButton>
                }
            }
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => doSavePlaylist())">Save</MatButton>
            <MatButton OnClick="@(e => { playlistDialogIsOpen = false; isSelected.Clear(); })">Cancel</MatButton>
        </MatDialogActions>
    </MatDialog>

    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <div class="mat-elevation-z4" style="padding: 10px;">
                    <MatStringField Value="@playlist" Label="Search" Outlined="true" ValueChanged="@(s => doSearch(s))"></MatStringField>
                    @if (playlist != null)
                    {
                        var exists = JukeboxService.Playlists.Any(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase));
                        <MatButton Disabled="@exists" Raised="true" OnClick="@(m => createPlaylist())">Create Playlist</MatButton>
                        <MatButton Disabled="@(!exists)" Raised="true" OnClick="@(m => clearPlaylist())">Clear Playlist</MatButton>
                    }
                    @if (Tunes != null)
                    {
                        <MatButton Raised="true" Icon="@MatIconNames.Playlist_add_check" OnClick="@(e => { playlistDialogIsOpen = true; })" Disabled="@(!Tunes.Any())">Align</MatButton>
                    }
                    @($"{Tunes?.Count:#,##0}")
                    <div>
                        @{
                            var comma = ", ";
                            foreach (var p in JukeboxService.Playlists.Where(pp => pp.Tunes.Count > 0).OrderBy(pp => pp.Name).ToList())
                            {
                                <a href="/playlists/@p.Name" class="navItem">@(p.Name)&nbsp;(@p.Tunes.Count.ToString("#,##0"))</a>@comma
                            }
                        }
                        <a href="/library/orphan" class="navItem">Orphans</a>
                    </div>
                    <NameNav Path="@(new Uri(NavigationManager.Uri).LocalPath)"></NameNav>
                </div>
                <div class="mat-elevation-z4 scrollable70">
                    @if (Tunes != null)
                    {
                        foreach (var tune in Tunes.Take(100))
                        {
                            <TuneCard Tune="@tune"></TuneCard>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string library { get; set; }
    [Parameter] public string playlist { get; set; }
    [Parameter] public string tag { get; set; }
    bool playlistDialogIsOpen = false;
    List<Tune> Tunes;
    Dictionary<Data.Playlist, bool> isSelected = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += (s, e) => doNavTo();
        await JukeboxService.GetJukeboxAsync();
        doNavTo();
    }

    protected void doNavTo()
    {
        if (!JukeboxService.Loaded) return;

        if (!string.IsNullOrWhiteSpace(library))
        {
            if (library.Equals("all", StringComparison.CurrentCultureIgnoreCase))
            {
                playlist = "All";
                Tunes = JukeboxService.Tunes;
            }
            else if (library.Equals("orphan", StringComparison.CurrentCultureIgnoreCase))
            {
                playlist = "Orphans";
                var comparer = new Tune();
                var pltunes = JukeboxService.Playlists.SelectMany(p => p.Tunes).Distinct(comparer);
                Tunes = JukeboxService.Tunes.Except(pltunes, comparer).Where(t => t.Durationms > 0).ToList();
            }
            else
            {
                playlist = library;
                Tunes = JukeboxService.Tunes
                    .Where(t => t.Library != null)
                    .Where(t => t.Library.Equals(library, StringComparison.CurrentCultureIgnoreCase))
                    .ToList();
            }
        }
        else if (!string.IsNullOrWhiteSpace(tag))
        {
            playlist = tag;
            Tunes = JukeboxService.Tunes
                .Where(t => t.Tags.Any(tag => tag.Equals(tag, StringComparison.CurrentCultureIgnoreCase))
                        || (t.Name?.StartsWith(tag, StringComparison.CurrentCultureIgnoreCase) ?? false))
                .ToList();
        }
        else
        {
            if (string.IsNullOrWhiteSpace(playlist))
            {
                playlist = JukeboxService.Playlists
                    .OrderBy(p => p.Tunes?.Count ?? 0)
                    .Select(p => p.Name)
                    .FirstOrDefault();
            }

            var p = JukeboxService.Playlists.FirstOrDefault(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase));
            if (p != null)
            {
                Tunes = p.Tunes;
            }
        }

        // Parse for any querystring
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("start", out var token))
        {
            var navstart = token.First();
            Tunes = Tunes
                .Where(t => t.Name?.StartsWith(navstart, StringComparison.CurrentCultureIgnoreCase) ?? false)
                .ToList();
        }

        isSelected.Clear();
        StateHasChanged();
    }

    protected void doSearch(string search)
    {
        if (string.IsNullOrWhiteSpace(search)) return;
        if (search.Equals(playlist, StringComparison.CurrentCultureIgnoreCase)) return;
        playlist = search;
        Tunes = JukeboxService.Tunes
            .Where(t => t.Tags.Any(tag => tag.Contains(search, StringComparison.CurrentCultureIgnoreCase))
                    || (t.Name?.StartsWith(search, StringComparison.CurrentCultureIgnoreCase) ?? false))
            .ToList();
        StateHasChanged();
    }

    protected void createPlaylist()
    {
        // if a new playlist is requested, add it
        if (!string.IsNullOrWhiteSpace(playlist) && !JukeboxService.Playlists.Any(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase)))
        {
            var p = new Data.Playlist { Name = toTitleCase(playlist), ID = ObjectId.NewObjectId(), Tunes = Tunes };
            JukeboxService.Playlists.Add(p);
            JukeboxService.SavePlaylist(p);
            StateHasChanged();
        }
    }

    protected void clearPlaylist()
    {
        JukeboxService.ClearPlaylist(playlist);
        StateHasChanged();
    }

    protected void doSavePlaylist()
    {
        if (Tunes.Count == 0) return;

        // get each playlist in isSelected and add all tunes to them
        foreach (var entry in isSelected)
        {
            var playlist = JukeboxService.Playlists.FirstOrDefault(p => p.ID == entry.Key.ID);
            if (entry.Value)
            {
                playlist.Tunes = playlist.Tunes.Union(Tunes, new Tune()).OrderBy(t => t.Name).ToList();
            }
            else
            {
                // subtract from these!
                playlist.Tunes = playlist.Tunes.Except(Tunes, new Tune()).OrderBy(t => t.Name).ToList();
            }
            JukeboxService.SavePlaylist(playlist);
        }

        // clear the isSelected list
        isSelected.Clear();

        playlistDialogIsOpen = false;
        StateHasChanged();
    }

    protected void toggleSelected(Data.Playlist playlist)
    {
        if (isSelected.ContainsKey(playlist))
        {
            isSelected[playlist] = !isSelected[playlist];
        }
        else
        {
            isSelected.Add(playlist, true);
        }
        StateHasChanged();
    }

    protected string toTitleCase(string input) => System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(input);
}
