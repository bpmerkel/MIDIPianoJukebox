@page "/playlists"
@page "/playlists/{playlist}"
@page "/tag/{tag}"
@inject NavigationManager NavigationManager
@inject JukeboxService JukeboxService
@inject IDialogService DialogService
@using LiteDB
@using MIDIPianoJukebox.Data

@if (!JukeboxService.Loaded)
{
    <div class="loading">
        <em>Loading...</em><br />
        <img src="/giphy.gif" alt="Loading..." />
    </div>
}
else
{
    <Picker UrlBase="/playlists" />
    <MudDataGrid Items="@Tunes" T="Tune"
        Hideable="false" Hover="true" Dense="true" Striped="true" FixedFooter="false"
        Groupable="true" GroupExpanded="true"
        SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@quickFilter"
        Virtualize="true" FixedHeader="true" Height="calc(100% - 80px)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@($"{Tunes?.Count:#,##0}") Tunes</MudText>
            <MudTextField @bind-Value="@playlist" Placeholder="Search"
                Variant="Variant.Outlined" Margin="Margin.Dense"
                Adornment="Adornment.Start" Immediate="true" Clearable="true" TextChanged="doSearch"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" class="ml-5 mr-5" />
            @if (playlist != null)
            {
                var exists = JukeboxService.Playlists.Any(p => p.Name.Equals(playlist, StringComparison.CurrentCultureIgnoreCase));
                <MudButton Disabled="@exists" OnClick="@(m => createPlaylist())" Variant="Variant.Filled" Color="Color.Primary" class="ml-5">Create Playlist</MudButton>
                <MudButton Disabled="@(!exists)" OnClick="@(m => clearPlaylist())" Variant="Variant.Filled" Color="Color.Primary" class="ml-5">Remove Playlist</MudButton>
            }
            @if (Tunes != null)
            {
                <MudButton StartIcon="@Icons.Material.Filled.PlaylistAdd" OnClick="@(e => openDialog())" Disabled="@(!Tunes.Any())" Variant="Variant.Filled" Color="Color.Primary" class="ml-5">Align</MudButton>
            }
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="tune => tune.Name" />
            <PropertyColumn Property="tune => tune.Duration" Format="mm\:ss" Filterable="false" Class="justify-right" CellClass="justify-right" />
            <TemplateColumn Title="Rating" SortBy="@(item => item.Rating)" Filterable="false" Class="justify-right" CellClass="justify-right">
                <CellTemplate>
                    <MudStack Row>
                        <MudRating Size="@Size.Small" SelectedValue="@(Convert.ToInt32(context.Item.Rating))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
             <PropertyColumn Property="tune => tune.Tracks" Class="justify-right" CellClass="justify-right" />
             <PropertyColumn Property="tune => tune.Messages" Class="justify-right" CellClass="justify-right" Format="#,##0" />
        </Columns>
        <ChildRowContent>
            <TagList Tune="@context.Item" />
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Tune" PageSizeOptions="@(new[] { 30, 50, 100, 200 })" />
        </PagerContent>
    </MudDataGrid>
}