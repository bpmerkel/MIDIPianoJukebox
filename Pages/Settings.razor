@page "/settings"
@inject JukeboxService JukeboxService

@if (!JukeboxService.Loaded)
{
    <div style="text-align: center; align-content: center; vertical-align: middle">
        <em>Loading...</em><br />
        <img src="/giphy.gif" alt="Loading..." />
    </div>
}
else
{
    <h3>Settings</h3>
    <div style="padding: 10px; white-space: nowrap;">
        <MudTextField @bind-Value="@JukeboxService.Settings.MIDIPath" Label="MIDI Path" Variant="Variant.Text" Disabled="@processing"></MudTextField>
        <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="@(_ => doDatabaseRefresh())" Disabled="@processing">Refresh</MudButton>
        <MudSelect Dense="true" T="string" Label="MIDI Output Device" Variant="Variant.Text" Value="@JukeboxService.Settings.OutputDevice" ValueChanged="@doChangeOutputDevice">
            @foreach (var od in JukeboxService.GetDevices())
            {
                <MudSelectItem Value="@od.Id">@od.Name</MudSelectItem>
            }
            <MudSelectItem Value=@("refresh")>(Refresh List)</MudSelectItem>
        </MudSelect>
    </div>
    
    <h3>Log</h3>
    <div style="padding: 10px; overflow-y: scroll; height: calc(100vh - 310px)">
        @if (processing)
        {
            <MudProgressLinear Color="Color.Primary" Striped="true" Value="@Progress" Size="Size.Small" />
        }
        @foreach (var log in JukeboxService.Log)
        {
            <div>@log</div>
        }
    </div>
}

@code {
    double Progress = 0d;
    bool processing = false;

    protected override async Task OnInitializedAsync()
    {
        await JukeboxService.GetJukeboxAsync();
        await base.OnInitializedAsync();
    }

    async void addLog(string msg)
    {
        await JukeboxService.AddLog(msg);
        await base.InvokeAsync(StateHasChanged);
    }

    async void updateProgress(double prg)
    {
        Progress = prg;
        await base.InvokeAsync(StateHasChanged);
    }

    async Task doDatabaseRefresh()
    {
        processing = true;
        JukeboxService.SaveSettings();
        await JukeboxService.RefreshDatabaseAsync(msg => addLog(msg), prg => updateProgress(prg));
        processing = false;
        await base.InvokeAsync(StateHasChanged);
    }

    void doChangeOutputDevice(string sel)
    {
        if (sel == "refresh")
        {
            StateHasChanged();
        }
        else
        {
            JukeboxService.Settings.OutputDevice = sel;
            JukeboxService.SaveSettings();
        }
    }
}
