@using MIDIPianoJukebox.Data

<MudCard>
    <MudCardHeader Class="pb-0">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Tune.Name</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (OnRatingChanged.HasDelegate)
            {
                <MudRating Size="@Size.Small" SelectedValue="@(Convert.ToInt32(Tune.Rating))" MaxValue="5" SelectedValueChanged="doRatingChanged" />
            }
            @if (OnEnqueue.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Filled.AddToQueue" OnClick="@(_ => doEnqueue())" title="Add to Queue" />
            }
            @if (OnDequeue.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Filled.RemoveFromQueue" OnClick="@(_ => doDequeue())" title="Remove from Queue" />
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        <MudSimpleTable Dense="true" Hover="false" Bordered="false" Striped="false">
            <thead>
                <tr>
                    <th>Duration</th>
                    <th>Tracks</th>
                    <th>Messages</th>
                    <th>Plays</th>
                    @if (!OnRatingChanged.HasDelegate)
                    {
                        <th>Rating</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Tune.Duration.ToString("m\\:ss")</td>
                    <td>@Tune.Tracks</td>
                    <td>@($"{Tune.Messages:#,##0}")</td>
                    <td>@Tune.Plays</td>
                    @if (!OnRatingChanged.HasDelegate)
                    {
                        <td>@Tune.Rating</td>
                    }
                </tr>
                <tr>
                    <td colspan="6"><TagList Tune="@Tune" /></td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public Tune Tune { get; set; }
    [Parameter] public EventCallback<Tune> OnDequeue { get; set; }
    [Parameter] public EventCallback<Tune> OnEnqueue { get; set; }
    [Parameter] public EventCallback<float> OnRatingChanged { get; set; }

    protected async void doEnqueue() => await OnEnqueue.InvokeAsync(Tune);
    protected async void doDequeue() => await OnDequeue.InvokeAsync(Tune);

    protected async void doRatingChanged(int rating)
    {
        if (Tune.Rating != rating)
        {
            Tune.Rating = rating;
            await OnRatingChanged.InvokeAsync(rating);
            StateHasChanged();
        }
    }
}