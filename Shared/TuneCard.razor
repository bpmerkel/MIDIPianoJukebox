@using MIDIPianoJukebox.Data

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Tune.Name</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (OnRatingChanged.HasDelegate)
            {
                <MudRating Size="@Size.Small" SelectedValue="@(Convert.ToInt32(Tune.Rating))" MaxValue="3" SelectedValueChanged="doRatingChanged" />
            }
            @if (OnEnqueue.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Filled.AddToQueue" OnClick="@(_ => doEnqueue())" title="Add to Queue" />
            }
            @if (OnDequeue.HasDelegate)
            {
                <MudIconButton Icon="@Icons.Material.Filled.RemoveFromQueue" OnClick="@(_ => doDequeue())" title="Remove from Queue" />
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <span class="topLabel">Library</span> <a href="@($"/library/{Tune.Library}")" class="tagLink">@Tune.Library</a>
        <span class="topLabel">Duration</span> @Tune.Duration.ToString("m\\:ss")
        <span class="topLabel">Tracks</span> @Tune.Tracks
        <span class="topLabel">Complexity</span> @Tune.Complexity
        <span class="topLabel">Plays</span> @Tune.Plays
        @if (!OnRatingChanged.HasDelegate)
        {
            <span class="topLabel">Rating</span> @Tune.Rating
        }
        <TagList Tune="@Tune"/>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public Tune Tune { get; set; }
    [Parameter] public EventCallback<Tune> OnDequeue { get; set; }
    [Parameter] public EventCallback<Tune> OnEnqueue { get; set; }
    [Parameter] public EventCallback<float> OnRatingChanged { get; set; }

    protected async void doEnqueue() => await OnEnqueue.InvokeAsync(Tune);
    protected async void doDequeue() => await OnDequeue.InvokeAsync(Tune);

    protected async void doRatingChanged(int rating)
    {
        Tune.Rating = rating;
        await OnRatingChanged.InvokeAsync(rating);
        StateHasChanged();
    }
}